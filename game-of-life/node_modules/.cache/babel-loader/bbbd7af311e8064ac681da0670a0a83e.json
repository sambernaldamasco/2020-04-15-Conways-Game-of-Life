{"ast":null,"code":"var _jsxFileName = \"/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Board from './components/Board'; // Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n//number of rows/columns\n\nconst boardRows = 50;\nconst boardColumns = 50; //cellInitialStatus returns random true/false value to identify alive/dead statuses\n//and it's the default value for the argument\n\nconst generateBoardStatus = (cellInitialStatus = () => Math.random() >= 0.5) => {\n  const grid = []; //generating the rows\n\n  for (let row = 0; row < boardRows; row++) {\n    grid[row] = []; //generating the columns and associating the cell status with it\n\n    for (let column = 0; column < boardColumns; column++) {\n      grid[row][column] = cellInitialStatus();\n    }\n  } //end of for loop\n\n\n  return grid;\n};\n\nfunction App() {\n  //creating state for boardStatus to be passed as props\n  const [boardStatus, setBoardStatus] = useState(generateBoardStatus()); //boolean for start/pause\n\n  const [runGame, setRunGame] = useState(false); //speed of the game\n\n  const speed = 200; //takes the index for row/column when called and evaluates if\n  //the cell is on the board and reduce the neighbor cells to an array only with cells that are true\n\n  const aliveCells = (row, column) => {\n    //checking only the 4 imminent \"neighbour\" cells\n    const neighbourCells = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    return neighbourCells.reduce((aliveCells, cells) => {\n      const rowPosition = row + cells[0];\n      const columnPosition = column + cells[1];\n      const isCellOnBoard = rowPosition >= 0 && rowPosition < boardRows && columnPosition >= 0 && columnPosition < boardColumns;\n\n      if (aliveCells < 4 && isCellOnBoard && boardStatus[rowPosition][columnPosition]) {\n        return aliveCells + 1;\n      } else {\n        return aliveCells;\n      }\n    }, 0);\n  }; //closing function alive cells\n\n\n  const updateBoard = () => {\n    //having to do this due to JS not allowing clone of multidimensional arrays\n    let clonedBoard = JSON.parse(JSON.stringify(boardStatus));\n\n    for (let r = 0; r < boardRows; r++) {\n      for (let c = 0; c < boardColumns; c++) {\n        const totalAliveCells = aliveCells(r, c);\n\n        if (!boardStatus[r][c]) {\n          if (totalAliveCells === 3) clonedBoard[r][c] = true;\n        } else {\n          if (totalAliveCells < 2 || totalAliveCells > 3) clonedBoard[r][c] = false;\n        }\n      } //closing column for\n\n    } //closing row for\n\n\n    return clonedBoard;\n  };\n\n  const refreshBoard = () => {\n    setInterval(() => {\n      setBoardStatus(updateBoard());\n    }, speed);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    boardStatus: boardStatus,\n    boardRows: boardRows,\n    boardColumns: boardColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }\n  }), runGame ? null : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => refreshBoard(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 22\n    }\n  }, \"start\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js"],"names":["React","useState","useEffect","Board","boardRows","boardColumns","generateBoardStatus","cellInitialStatus","Math","random","grid","row","column","App","boardStatus","setBoardStatus","runGame","setRunGame","speed","aliveCells","neighbourCells","reduce","cells","rowPosition","columnPosition","isCellOnBoard","updateBoard","clonedBoard","JSON","parse","stringify","r","c","totalAliveCells","refreshBoard","setInterval"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board';\n// Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n\n//number of rows/columns\nconst boardRows = 50;\nconst boardColumns = 50;\n\n//cellInitialStatus returns random true/false value to identify alive/dead statuses\n//and it's the default value for the argument\nconst generateBoardStatus = (\n\tcellInitialStatus = () => Math.random() >= 0.5\n) => {\n\tconst grid = [];\n\t//generating the rows\n\tfor (let row = 0; row < boardRows; row++) {\n\t\tgrid[row] = [];\n\t\t//generating the columns and associating the cell status with it\n\t\tfor (let column = 0; column < boardColumns; column++) {\n\t\t\tgrid[row][column] = cellInitialStatus();\n\t\t}\n\t} //end of for loop\n\n\treturn grid;\n};\n\nfunction App() {\n\t//creating state for boardStatus to be passed as props\n\tconst [boardStatus, setBoardStatus] = useState(generateBoardStatus());\n\n\t//boolean for start/pause\n\tconst [runGame, setRunGame] = useState(false);\n\n\t//speed of the game\n\tconst speed = 200;\n\n\t//takes the index for row/column when called and evaluates if\n\t//the cell is on the board and reduce the neighbor cells to an array only with cells that are true\n\tconst aliveCells = (row, column) => {\n\t\t//checking only the 4 imminent \"neighbour\" cells\n\t\tconst neighbourCells = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, 1],\n\t\t\t[1, 1],\n\t\t\t[1, 0],\n\t\t\t[1, -1],\n\t\t\t[0, -1],\n\t\t];\n\n\t\treturn neighbourCells.reduce((aliveCells, cells) => {\n\t\t\tconst rowPosition = row + cells[0];\n\t\t\tconst columnPosition = column + cells[1];\n\n\t\t\tconst isCellOnBoard =\n\t\t\t\trowPosition >= 0 &&\n\t\t\t\trowPosition < boardRows &&\n\t\t\t\tcolumnPosition >= 0 &&\n\t\t\t\tcolumnPosition < boardColumns;\n\n\t\t\tif (\n\t\t\t\taliveCells < 4 &&\n\t\t\t\tisCellOnBoard &&\n\t\t\t\tboardStatus[rowPosition][columnPosition]\n\t\t\t) {\n\t\t\t\treturn aliveCells + 1;\n\t\t\t} else {\n\t\t\t\treturn aliveCells;\n\t\t\t}\n\t\t}, 0);\n\t}; //closing function alive cells\n\n\tconst updateBoard = () => {\n\t\t//having to do this due to JS not allowing clone of multidimensional arrays\n\t\tlet clonedBoard = JSON.parse(JSON.stringify(boardStatus));\n\n\t\tfor (let r = 0; r < boardRows; r++) {\n\t\t\tfor (let c = 0; c < boardColumns; c++) {\n\t\t\t\tconst totalAliveCells = aliveCells(r, c);\n\t\t\t\tif (!boardStatus[r][c]) {\n\t\t\t\t\tif (totalAliveCells === 3) clonedBoard[r][c] = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (totalAliveCells < 2 || totalAliveCells > 3)\n\t\t\t\t\t\tclonedBoard[r][c] = false;\n\t\t\t\t}\n\t\t\t} //closing column for\n\t\t} //closing row for\n\t\treturn clonedBoard;\n\t};\n\n\tconst refreshBoard = () => {\n\t\tsetInterval(() => {\n\t\t\tsetBoardStatus(updateBoard());\n\t\t}, speed);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Board\n\t\t\t\tboardStatus={boardStatus}\n\t\t\t\tboardRows={boardRows}\n\t\t\t\tboardColumns={boardColumns}\n\t\t\t/>\n\t\t\t{runGame ? null : <button onClick={() => refreshBoard()}>start</button>}\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}