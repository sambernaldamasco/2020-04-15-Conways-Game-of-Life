{"ast":null,"code":"var _jsxFileName = \"/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Board from './components/Board'; // Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n//number of rows/columns\n\nconst boardRows = 10;\nconst boardColumns = 10; //returns random true/false value to identify alive/dead statuses\n\nconst cellInitialStatus = () => Math.random() >= 0.5;\n\nconst generateBoardStatus = () => {\n  const grid = []; //generating the rows\n\n  for (let row = 0; row < boardRows; row++) {\n    grid[row] = []; //generating the columns and associating the cell status with it\n\n    for (let column = 0; column < boardColumns; column++) {\n      grid[row][column] = cellInitialStatus();\n    }\n  } //end of for loop\n\n\n  return grid;\n};\n\nfunction App() {\n  //creating state for boardStatus to be passed as props\n  const [boardStatus, setBoardStatus] = useState(generateBoardStatus()); //boolean for start/pause\n\n  const [runGame, setRunGame] = useState(false); //speed of the game\n\n  const [speed, setSpeed] = useState(200);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    boardStatus: boardStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }), runGame ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunGame(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"stop\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunGame(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, \"start\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js"],"names":["React","useState","Board","boardRows","boardColumns","cellInitialStatus","Math","random","generateBoardStatus","grid","row","column","App","boardStatus","setBoardStatus","runGame","setRunGame","speed","setSpeed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,MAAMC,IAAI,CAACC,MAAL,MAAiB,GAAjD;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AACjC,QAAMC,IAAI,GAAG,EAAb,CADiC,CAEjC;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGP,SAAxB,EAAmCO,GAAG,EAAtC,EAA0C;AACzCD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ,CADyC,CAEzC;;AACA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGP,YAA9B,EAA4CO,MAAM,EAAlD,EAAsD;AACrDF,MAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,MAAV,IAAoBN,iBAAiB,EAArC;AACA;AACD,GATgC,CAS/B;;;AAEF,SAAOI,IAAP;AACA,CAZD;;AAcA,SAASG,GAAT,GAAe;AACd;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAACO,mBAAmB,EAApB,CAA9C,CAFc,CAId;;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC,CALc,CAOd;;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,GAAD,CAAlC;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAEY,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEEE,OAAO,gBACP;AAAQ,IAAA,OAAO,EAAE,MAAMC,UAAU,CAAC,KAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAGP;AAAQ,IAAA,OAAO,EAAE,MAAMA,UAAU,CAAC,IAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,CADD;AAUA;;AAED,eAAeJ,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board';\n// Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n\n//number of rows/columns\nconst boardRows = 10;\nconst boardColumns = 10;\n\n//returns random true/false value to identify alive/dead statuses\nconst cellInitialStatus = () => Math.random() >= 0.5;\n\nconst generateBoardStatus = () => {\n\tconst grid = [];\n\t//generating the rows\n\tfor (let row = 0; row < boardRows; row++) {\n\t\tgrid[row] = [];\n\t\t//generating the columns and associating the cell status with it\n\t\tfor (let column = 0; column < boardColumns; column++) {\n\t\t\tgrid[row][column] = cellInitialStatus();\n\t\t}\n\t} //end of for loop\n\n\treturn grid;\n};\n\nfunction App() {\n\t//creating state for boardStatus to be passed as props\n\tconst [boardStatus, setBoardStatus] = useState(generateBoardStatus());\n\n\t//boolean for start/pause\n\tconst [runGame, setRunGame] = useState(false);\n\n\t//speed of the game\n\tconst [speed, setSpeed] = useState(200);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Board boardStatus={boardStatus} />\n\t\t\t{runGame ? (\n\t\t\t\t<button onClick={() => setRunGame(false)}>stop</button>\n\t\t\t) : (\n\t\t\t\t<button onClick={() => setRunGame(true)}>start</button>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}