{"ast":null,"code":"var _jsxFileName = \"/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/components/Board.js\";\nimport React from 'react';\n\nfunction Board() {\n  const boardRows = 10;\n  const boardColumns = 10; //returns random true/false value to identify alive/dead statuses\n\n  const cellInitialStatus = () => Math.random() >= 0.5;\n\n  const boardStatus = () => {\n    const grid = []; //generating the rows\n\n    for (let row = 0; row < boardRows; row++) {\n      grid[row] = []; //generating the columns and associating the cell status with it\n\n      for (let column = 0; column < boardColumns; column++) {\n        grid[row][column] = cellInitialStatus();\n      }\n    } //end of for loop\n\n\n    return grid;\n  }; //generating board grid\n\n\n  const generateGrid = () => {\n    const boardStatus = boardStatus();\n    const tableRow = [];\n\n    for (let row = 0; row < boardRows; row++) {\n      const tableData = [];\n\n      for (let column = 0; column < boardColumns; column++) {\n        tableData.push( /*#__PURE__*/React.createElement(\"td\", {\n          key: `${row}, ${column}`,\n          className: boardStatus[row][column] ? 'alive' : 'dead',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 6\n          }\n        }));\n      } //end of column for\n\n\n      tableRow.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 18\n        }\n      }, tableData));\n    } //end of row for\n\n\n    return /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, \" \", tableRow));\n  };\n\n  const finalGrid = generateGrid();\n  return finalGrid;\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/components/Board.js"],"names":["React","Board","boardRows","boardColumns","cellInitialStatus","Math","random","boardStatus","grid","row","column","generateGrid","tableRow","tableData","push","finalGrid"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,GAAiB;AAChB,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,YAAY,GAAG,EAArB,CAFgB,CAIhB;;AACA,QAAMC,iBAAiB,GAAG,MAAMC,IAAI,CAACC,MAAL,MAAiB,GAAjD;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACzB,UAAMC,IAAI,GAAG,EAAb,CADyB,CAEzB;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGP,SAAxB,EAAmCO,GAAG,EAAtC,EAA0C;AACzCD,MAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,EAAZ,CADyC,CAEzC;;AACA,WAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGP,YAA9B,EAA4CO,MAAM,EAAlD,EAAsD;AACrDF,QAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,MAAV,IAAoBN,iBAAiB,EAArC;AACA;AACD,KATwB,CASvB;;;AAEF,WAAOI,IAAP;AACA,GAZD,CAPgB,CAqBhB;;;AACA,QAAMG,YAAY,GAAG,MAAM;AAC1B,UAAMJ,WAAW,GAAGA,WAAW,EAA/B;AACA,UAAMK,QAAQ,GAAG,EAAjB;;AAEA,SAAK,IAAIH,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGP,SAAxB,EAAmCO,GAAG,EAAtC,EAA0C;AACzC,YAAMI,SAAS,GAAG,EAAlB;;AACA,WAAK,IAAIH,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGP,YAA9B,EAA4CO,MAAM,EAAlD,EAAsD;AACrDG,QAAAA,SAAS,CAACC,IAAV,eACC;AACC,UAAA,GAAG,EAAG,GAAEL,GAAI,KAAIC,MAAO,EADxB;AAEC,UAAA,SAAS,EAAEH,WAAW,CAACE,GAAD,CAAX,CAAiBC,MAAjB,IAA2B,OAA3B,GAAqC,MAFjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA,OATwC,CASvC;;;AACFE,MAAAA,QAAQ,CAACE,IAAT,eAAc;AAAI,QAAA,GAAG,EAAEL,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeI,SAAf,CAAd;AACA,KAfyB,CAexB;;;AAEF,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAASD,QAAT,CADD,CADD;AAKA,GAtBD;;AAwBA,QAAMG,SAAS,GAAGJ,YAAY,EAA9B;AACA,SAAOI,SAAP;AACA;;AAED,eAAed,KAAf","sourcesContent":["import React from 'react';\n\nfunction Board() {\n\tconst boardRows = 10;\n\tconst boardColumns = 10;\n\n\t//returns random true/false value to identify alive/dead statuses\n\tconst cellInitialStatus = () => Math.random() >= 0.5;\n\n\tconst boardStatus = () => {\n\t\tconst grid = [];\n\t\t//generating the rows\n\t\tfor (let row = 0; row < boardRows; row++) {\n\t\t\tgrid[row] = [];\n\t\t\t//generating the columns and associating the cell status with it\n\t\t\tfor (let column = 0; column < boardColumns; column++) {\n\t\t\t\tgrid[row][column] = cellInitialStatus();\n\t\t\t}\n\t\t} //end of for loop\n\n\t\treturn grid;\n\t};\n\n\t//generating board grid\n\tconst generateGrid = () => {\n\t\tconst boardStatus = boardStatus();\n\t\tconst tableRow = [];\n\n\t\tfor (let row = 0; row < boardRows; row++) {\n\t\t\tconst tableData = [];\n\t\t\tfor (let column = 0; column < boardColumns; column++) {\n\t\t\t\ttableData.push(\n\t\t\t\t\t<td\n\t\t\t\t\t\tkey={`${row}, ${column}`}\n\t\t\t\t\t\tclassName={boardStatus[row][column] ? 'alive' : 'dead'}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t} //end of column for\n\t\t\ttableRow.push(<tr key={row}>{tableData}</tr>);\n\t\t} //end of row for\n\n\t\treturn (\n\t\t\t<table>\n\t\t\t\t<tbody> {tableRow}</tbody>\n\t\t\t</table>\n\t\t);\n\t};\n\n\tconst finalGrid = generateGrid();\n\treturn finalGrid;\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}