{"ast":null,"code":"var _jsxFileName = \"/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Board from './components/Board'; // Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n//number of rows/columns\n\nconst boardRows = 10;\nconst boardColumns = 10; //cellInitialStatus returns random true/false value to identify alive/dead statuses\n//and it's the default value for the argument\n\nconst generateBoardStatus = (cellInitialStatus = () => Math.random() >= 0.5) => {\n  const grid = []; //generating the rows\n\n  for (let row = 0; row < boardRows; row++) {\n    grid[row] = []; //generating the columns and associating the cell status with it\n\n    for (let column = 0; column < boardColumns; column++) {\n      grid[row][column] = cellInitialStatus();\n    }\n  } //end of for loop\n\n\n  return grid;\n};\n\nfunction App() {\n  //creating state for boardStatus to be passed as props\n  const [boardStatus, setBoardStatus] = useState(generateBoardStatus()); //boolean for start/pause\n\n  const [runGame, setRunGame] = useState(false); //speed of the game\n\n  const [speed, setSpeed] = useState(200); //clearing the board by updating the state and sending an anonymous function to generateBoardStatus as false\n\n  const clearBoard = () => setBoardStatus(generateBoardStatus(() => false)); //generating new board\n\n\n  const newBoard = () => setBoardStatus(generateBoardStatus());\n\n  const updateBoard = () => {\n    const clonedBoard = [...boardStatus];\n\n    const aliveCells = (row, column) => {\n      //checking only the 4 imminent \"neighbour\" cells\n      const neighbourCells = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n      const checkAliveCells = neighbourCells.reduce((aliveCells, cells) => {\n        const rowPosition = row + cells[0];\n        const columnPosition = column + cells[1];\n        const isCellOnBoard = rowPosition >= 0 && rowPosition < boardRows && columnPosition >= 0 && columnPosition < boardColumns;\n\n        if (aliveCells < 4 && isCellOnBoard && boardStatus[(rowPosition, columnPosition)]) {\n          return aliveCells + 1;\n        } else {\n          return aliveCells;\n        }\n      }, 0);\n    }; //closing function alive cells\n\n\n    for (let row = 0; row < boardRows; row++) {\n      for (let column = 0; row < boardColumns; column++) {\n        const totalAliveCells = aliveCells(row, column);\n\n        if (!boardStatus[row][column]) {\n          if (totalAliveCells === 3) clonedBoard[row][column] = true;\n        } else {\n          if (totalAliveCells < 2 || totalAliveCells > 3) clonedBoard[row][column] = false;\n        }\n      } //closing column for\n\n    } //closing row for\n\n\n    return clonedBoard;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 3\n    }\n  }, console.log(updateBoard()), /*#__PURE__*/React.createElement(Board, {\n    boardStatus: boardStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }\n  }), runGame ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunGame(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, \"stop\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunGame(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, \"start\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js"],"names":["React","useState","Board","boardRows","boardColumns","generateBoardStatus","cellInitialStatus","Math","random","grid","row","column","App","boardStatus","setBoardStatus","runGame","setRunGame","speed","setSpeed","clearBoard","newBoard","updateBoard","clonedBoard","aliveCells","neighbourCells","checkAliveCells","reduce","cells","rowPosition","columnPosition","isCellOnBoard","totalAliveCells","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board';\n// Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n\n//number of rows/columns\nconst boardRows = 10;\nconst boardColumns = 10;\n\n//cellInitialStatus returns random true/false value to identify alive/dead statuses\n//and it's the default value for the argument\nconst generateBoardStatus = (\n\tcellInitialStatus = () => Math.random() >= 0.5\n) => {\n\tconst grid = [];\n\t//generating the rows\n\tfor (let row = 0; row < boardRows; row++) {\n\t\tgrid[row] = [];\n\t\t//generating the columns and associating the cell status with it\n\t\tfor (let column = 0; column < boardColumns; column++) {\n\t\t\tgrid[row][column] = cellInitialStatus();\n\t\t}\n\t} //end of for loop\n\n\treturn grid;\n};\n\nfunction App() {\n\t//creating state for boardStatus to be passed as props\n\tconst [boardStatus, setBoardStatus] = useState(generateBoardStatus());\n\n\t//boolean for start/pause\n\tconst [runGame, setRunGame] = useState(false);\n\n\t//speed of the game\n\tconst [speed, setSpeed] = useState(200);\n\n\t//clearing the board by updating the state and sending an anonymous function to generateBoardStatus as false\n\tconst clearBoard = () => setBoardStatus(generateBoardStatus(() => false));\n\n\t//generating new board\n\tconst newBoard = () => setBoardStatus(generateBoardStatus());\n\n\tconst updateBoard = () => {\n\t\tconst clonedBoard = [...boardStatus];\n\n\t\tconst aliveCells = (row, column) => {\n\t\t\t//checking only the 4 imminent \"neighbour\" cells\n\t\t\tconst neighbourCells = [\n\t\t\t\t[-1, -1],\n\t\t\t\t[-1, 0],\n\t\t\t\t[-1, 1],\n\t\t\t\t[0, 1],\n\t\t\t\t[1, 1],\n\t\t\t\t[1, 0],\n\t\t\t\t[1, -1],\n\t\t\t\t[0, -1],\n\t\t\t];\n\n\t\t\tconst checkAliveCells = neighbourCells.reduce((aliveCells, cells) => {\n\t\t\t\tconst rowPosition = row + cells[0];\n\t\t\t\tconst columnPosition = column + cells[1];\n\n\t\t\t\tconst isCellOnBoard =\n\t\t\t\t\trowPosition >= 0 &&\n\t\t\t\t\trowPosition < boardRows &&\n\t\t\t\t\tcolumnPosition >= 0 &&\n\t\t\t\t\tcolumnPosition < boardColumns;\n\n\t\t\t\tif (\n\t\t\t\t\taliveCells < 4 &&\n\t\t\t\t\tisCellOnBoard &&\n\t\t\t\t\tboardStatus[(rowPosition, columnPosition)]\n\t\t\t\t) {\n\t\t\t\t\treturn aliveCells + 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn aliveCells;\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t}; //closing function alive cells\n\n\t\tfor (let row = 0; row < boardRows; row++) {\n\t\t\tfor (let column = 0; row < boardColumns; column++) {\n\t\t\t\tconst totalAliveCells = aliveCells(row, column);\n\n\t\t\t\tif (!boardStatus[row][column]) {\n\t\t\t\t\tif (totalAliveCells === 3) clonedBoard[row][column] = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (totalAliveCells < 2 || totalAliveCells > 3)\n\t\t\t\t\t\tclonedBoard[row][column] = false;\n\t\t\t\t}\n\t\t\t} //closing column for\n\t\t} //closing row for\n\t\treturn clonedBoard;\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{console.log(updateBoard())}\n\n\t\t\t<Board boardStatus={boardStatus} />\n\t\t\t{runGame ? (\n\t\t\t\t<button onClick={() => setRunGame(false)}>stop</button>\n\t\t\t) : (\n\t\t\t\t<button onClick={() => setRunGame(true)}>start</button>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}