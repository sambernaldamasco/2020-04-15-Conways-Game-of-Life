{"ast":null,"code":"var _jsxFileName = \"/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Board from './components/Board'; // Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n//number of rows/columns\n\nconst boardRows = 10;\nconst boardColumns = 10; //cellInitialStatus returns random true/false value to identify alive/dead statuses\n//and it's the default value for the argument\n\nconst generateBoardStatus = (cellInitialStatus = () => Math.random() >= 0.5) => {\n  const grid = []; //generating the rows\n\n  for (let row = 0; row < boardRows; row++) {\n    grid[row] = []; //generating the columns and associating the cell status with it\n\n    for (let column = 0; column < boardColumns; column++) {\n      grid[row][column] = cellInitialStatus();\n    }\n  } //end of for loop\n\n\n  return grid;\n};\n\nfunction App() {\n  //creating state for boardStatus to be passed as props\n  const [boardStatus, setBoardStatus] = useState(generateBoardStatus()); //boolean for start/pause\n\n  const [runGame, setRunGame] = useState(false); //speed of the game\n\n  const [speed, setSpeed] = useState(200); //clearing the board by updating the state and sending an anonymous function to generateBoardStatus as false\n\n  const clearBoard = () => setBoardStatus(generateBoardStatus(() => false)); //generating new board\n\n\n  const newBoard = () => setBoardStatus(generateBoardStatus()); //takes the index for row/column when called and evaluates if\n  //the cell is on the board and reduce the neighbor cells to an array only with cells that are true\n\n\n  const aliveCells = (row, column) => {\n    //checking only the 4 imminent \"neighbour\" cells\n    const neighbourCells = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    return neighbourCells.reduce((aliveCells, cells) => {\n      const rowPosition = row + cells[0];\n      const columnPosition = column + cells[1];\n      const isCellOnBoard = rowPosition >= 0 && rowPosition < boardRows && columnPosition >= 0 && columnPosition < boardColumns;\n\n      if (aliveCells < 4 && isCellOnBoard && boardStatus[(rowPosition, columnPosition)]) {\n        return aliveCells + 1;\n      } else {\n        return aliveCells;\n      }\n    }, 0);\n  }; //closing function alive cells\n\n\n  const updateBoard = () => {\n    const clonedBoard = [...boardStatus];\n    console.log(clonedBoard);\n\n    for (let r = 0; r < boardRows; r++) {\n      for (let c = 0; c < boardColumns; c++) {\n        const totalAliveCells = aliveCells(r, c);\n\n        if (!boardStatus[r][c]) {\n          if (totalAliveCells === 3) clonedBoard[r][c] = true;\n        } else {\n          if (totalAliveCells < 2 || totalAliveCells > 3) clonedBoard[r][c] = false;\n        }\n      } //closing column for\n\n    } //closing row for\n\n\n    console.log(clonedBoard);\n  };\n\n  const refreshBoard = () => {\n    let timerId = 0;\n\n    if (runGame) {\n      timerId = setInterval(() => {\n        updateBoard();\n      }, speed);\n    } else {\n      clearInterval(timerId);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 3\n    }\n  }, refreshBoard(), /*#__PURE__*/React.createElement(Board, {\n    boardStatus: boardStatus,\n    boardRows: boardRows,\n    boardColumns: boardColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }), runGame ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunGame(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, \"stop\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunGame(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, \"start\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sambernal/Desktop/projects/2020-04-15-Conways-Game-of-Life/game-of-life/src/App.js"],"names":["React","useState","Board","boardRows","boardColumns","generateBoardStatus","cellInitialStatus","Math","random","grid","row","column","App","boardStatus","setBoardStatus","runGame","setRunGame","speed","setSpeed","clearBoard","newBoard","aliveCells","neighbourCells","reduce","cells","rowPosition","columnPosition","isCellOnBoard","updateBoard","clonedBoard","console","log","r","c","totalAliveCells","refreshBoard","timerId","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board';\n// Any alive cell that is touching less than two alive neighbours dies.\n// Any alive cell touching four or more alive neighbours dies.\n// Any alive cell touching two or three alive neighbours does nothing.\n// Any dead cell touching exactly three alive neighbours becomes alive.\n\n//number of rows/columns\nconst boardRows = 10;\nconst boardColumns = 10;\n\n//cellInitialStatus returns random true/false value to identify alive/dead statuses\n//and it's the default value for the argument\nconst generateBoardStatus = (\n\tcellInitialStatus = () => Math.random() >= 0.5\n) => {\n\tconst grid = [];\n\t//generating the rows\n\tfor (let row = 0; row < boardRows; row++) {\n\t\tgrid[row] = [];\n\t\t//generating the columns and associating the cell status with it\n\t\tfor (let column = 0; column < boardColumns; column++) {\n\t\t\tgrid[row][column] = cellInitialStatus();\n\t\t}\n\t} //end of for loop\n\n\treturn grid;\n};\n\nfunction App() {\n\t//creating state for boardStatus to be passed as props\n\tconst [boardStatus, setBoardStatus] = useState(generateBoardStatus());\n\n\t//boolean for start/pause\n\tconst [runGame, setRunGame] = useState(false);\n\n\t//speed of the game\n\tconst [speed, setSpeed] = useState(200);\n\n\t//clearing the board by updating the state and sending an anonymous function to generateBoardStatus as false\n\tconst clearBoard = () => setBoardStatus(generateBoardStatus(() => false));\n\n\t//generating new board\n\tconst newBoard = () => setBoardStatus(generateBoardStatus());\n\n\t//takes the index for row/column when called and evaluates if\n\t//the cell is on the board and reduce the neighbor cells to an array only with cells that are true\n\n\tconst aliveCells = (row, column) => {\n\t\t//checking only the 4 imminent \"neighbour\" cells\n\t\tconst neighbourCells = [\n\t\t\t[-1, -1],\n\t\t\t[-1, 0],\n\t\t\t[-1, 1],\n\t\t\t[0, 1],\n\t\t\t[1, 1],\n\t\t\t[1, 0],\n\t\t\t[1, -1],\n\t\t\t[0, -1],\n\t\t];\n\n\t\treturn neighbourCells.reduce((aliveCells, cells) => {\n\t\t\tconst rowPosition = row + cells[0];\n\t\t\tconst columnPosition = column + cells[1];\n\n\t\t\tconst isCellOnBoard =\n\t\t\t\trowPosition >= 0 &&\n\t\t\t\trowPosition < boardRows &&\n\t\t\t\tcolumnPosition >= 0 &&\n\t\t\t\tcolumnPosition < boardColumns;\n\n\t\t\tif (\n\t\t\t\taliveCells < 4 &&\n\t\t\t\tisCellOnBoard &&\n\t\t\t\tboardStatus[(rowPosition, columnPosition)]\n\t\t\t) {\n\t\t\t\treturn aliveCells + 1;\n\t\t\t} else {\n\t\t\t\treturn aliveCells;\n\t\t\t}\n\t\t}, 0);\n\t}; //closing function alive cells\n\n\tconst updateBoard = () => {\n\t\tconst clonedBoard = [...boardStatus];\n\t\tconsole.log(clonedBoard);\n\n\t\tfor (let r = 0; r < boardRows; r++) {\n\t\t\tfor (let c = 0; c < boardColumns; c++) {\n\t\t\t\tconst totalAliveCells = aliveCells(r, c);\n\n\t\t\t\tif (!boardStatus[r][c]) {\n\t\t\t\t\tif (totalAliveCells === 3) clonedBoard[r][c] = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (totalAliveCells < 2 || totalAliveCells > 3)\n\t\t\t\t\t\tclonedBoard[r][c] = false;\n\t\t\t\t}\n\t\t\t} //closing column for\n\t\t} //closing row for\n\t\tconsole.log(clonedBoard);\n\t};\n\n\tconst refreshBoard = () => {\n\t\tlet timerId = 0;\n\t\tif (runGame) {\n\t\t\ttimerId = setInterval(() => {\n\t\t\t\tupdateBoard();\n\t\t\t}, speed);\n\t\t} else {\n\t\t\tclearInterval(timerId);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{refreshBoard()}\n\t\t\t<Board\n\t\t\t\tboardStatus={boardStatus}\n\t\t\t\tboardRows={boardRows}\n\t\t\t\tboardColumns={boardColumns}\n\t\t\t/>\n\t\t\t{runGame ? (\n\t\t\t\t<button onClick={() => setRunGame(false)}>stop</button>\n\t\t\t) : (\n\t\t\t\t<button onClick={() => setRunGame(true)}>start</button>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}